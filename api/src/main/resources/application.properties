#Keycloak/OAuth properties

#logging Properties
logging.level.org.springframework.security=${SPRING_SECURITY_LOG_LEVEL}
logging.level.org.springframework.web=${SPRING_WEB_LOG_LEVEL}
logging.level.ca.bc.gov.educ.api.pen.services=${APP_LOG_LEVEL}
logging.level.org.springframework.boot.autoconfigure.logging=${SPRING_BOOT_AUTOCONFIG_LOG_LEVEL}
spring.mvc.log-request-details=${SPRING_SHOW_REQUEST_DETAILS}
#DB Properties
spring.datasource.url=${JDBC_URL}
spring.datasource.username=${ORACLE_USERNAME}
spring.datasource.password=${ORACLE_PASSWORD}
spring.jpa.database-platform=org.hibernate.dialect.Oracle12cDialect
spring.jpa.hibernate.ddl-auto=none
spring.jackson.deserialization.fail-on-unknown-properties=false
management.endpoint.metrics.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.prometheus.enabled=true
management.metrics.export.prometheus.enabled=true
spring.jpa.properties.hibernate.generate_statistics=false
spring.datasource.hikari.max-lifetime=120000
spring.jmx.enabled=false
spring.flyway.baseline-on-migrate=true
spring.flyway.table=FLYWAY_SCHEMA_HISTORY
spring.flyway.baseline-version=0
spring.flyway.enabled=true
logging.file.name=/logs/app.log
logging.logback.rollingpolicy.max-file-size=5MB
logging.logback.rollingpolicy.clean-history-on-start=true
logging.logback.rollingpolicy.max-history=1
logging.pattern.file={"time_stamp":"%d{yyyy-MM-dd HH:mm:ss.SSS}","level":"%3p" ,"thread":"%t" ,"class":"%logger{36}","msg":"%replace(%msg){'[\n\r\"]',''}", "exception":"%replace(%rEx{10}){'[\n\r\"]',''}","http_event":%X{httpEvent:-""},"message_event":%X{messageEvent:-""}, "saga_retry":%X{sagaRetry:-""}}%nopex%n
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} | [%5p] | [%t] | [%logger{36}] | [%replace(%msg){'[\n\r\"]',''} %X{httpEvent} %X{messageEvent}] | %replace(%rEx{10}){'[\n\r\"]',''}%nopex%n
server.undertow.threads.io=16
server.undertow.threads.worker=128
#Print the queries
spring.jpa.show-sql=${SPRING_JPA_SHOW_SQL}
#Client details to get token to make api calls.
client.id=${CLIENT_ID}
client.secret=${CLIENT_SECRET}
url.token=${TOKEN_URL}
#Below are for making API calls to Student after getting the token.
url.api.student=${STUDENT_API_URL}
spring.data.redis.repositories.enabled=false
#This is used to run redis in local without cluster mode, in application-local.properties change this to local
#Add Redis cluster node address. Use follow format -- <code>host:port</code>. since it is a service in OS, we just give one entry.
nats.server=${NATS_URL}
nats.maxReconnect=${NATS_MAX_RECONNECT}
nats.connectionName=PEN-SERVICES-API
spring.security.oauth2.resourceserver.jwt.issuer-uri=${TOKEN_ISSUER_URL}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${TOKEN_ISSUER_URL}/protocol/openid-connect/certs
stan.cluster=${NATS_CLUSTER}
cron.scheduled.publish.events.stan.lockAtLeastFor=PT4M
cron.scheduled.publish.events.stan.lockAtMostFor=PT4M
cron.scheduled.publish.events.stan=0 0/5 * * * *
ramp.up.http=true
url.api.school=${SCHOOL_API_URL}
purge.records.saga.after.days=${PURGE_RECORDS_SAGA_AFTER_DAYS}
scheduled.jobs.purge.old.saga.records.cron=${SCHEDULED_JOBS_PURGE_OLD_SAGA_RECORDS_CRON}
